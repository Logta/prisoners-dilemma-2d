name: CI

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Rust (WASM) ジョブ
  rust:
    name: Rust Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Rust format check
        run: cd wasm && cargo fmt -- --check

      - name: Rust lint (Clippy)
        run: cd wasm && cargo clippy -- -D warnings

      - name: Rust tests
        run: cd wasm && cargo test

      - name: Build WASM
        run: cd wasm && wasm-pack build --target web --out-dir pkg

  # TypeScript (React) ジョブ
  typescript:
    name: TypeScript Check
    runs-on: ubuntu-latest
    needs: rust
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build WASM
        run: cd wasm && wasm-pack build --target web --out-dir pkg

      - name: Copy WASM to web
        run: |
          mkdir -p web/src/assets/pkg
          cp -r wasm/pkg/* web/src/assets/pkg/

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: web/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('web/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: cd web && bun install

      - name: TypeScript type check
        run: cd web && bun run type-check

      - name: Biome lint and format check
        run: cd web && bun run biome:check

  # 統合ビルドジョブ
  build:
    name: Full Build
    runs-on: ubuntu-latest
    needs: [rust, typescript]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: web/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('web/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Build WASM
        run: cd wasm && wasm-pack build --target web --out-dir pkg

      - name: Copy WASM to web
        run: |
          mkdir -p web/src/assets/pkg
          cp -r wasm/pkg/* web/src/assets/pkg/

      - name: Install web dependencies
        run: cd web && bun install

      - name: Build web app
        run: cd web && bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            wasm/pkg/
            web/dist/
          retention-days: 7
